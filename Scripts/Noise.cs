using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public static class Noise
{
    /// <summary>
    /// Global mode will estimate the global minimum and maximum. 
    /// The local mode will normalize according to the specific maps min and max.
    /// </summary>
    public enum NormalizeMode { Local, Global };

    /// <summary>
    /// Generates a perlin noise map using the Mathf.PerlinNose(). 
    /// Mathf.PerlinNoise takes in two values as coordinates and then returns a new float between 0 and 1 that will be the perlin value s.t.
    /// a grid of these values creates a perlin noise map. 
    /// </summary>
    /// <param name="mapWidth">width of the map</param>
    /// <param name="mapHeight">height of the map</param>
    /// <param name="seed">seed for the random number generator. </param>
    /// <param name="scale">how big the changes in the noise are</param>
    /// <param name="octaves">the number of layers added together to create final map</param>
    /// <param name="persistance">This controls how much each octave contributes to the noise (each on less than last) value between 0 and 1</param>
    /// <param name="lacunarity">controls the detail that each successive octave has on the map (greater than 1). Each successive octive is more detailed. </param>
    /// <param name="offSet">Any initial offset that you want to give to the function (allows scrolling through noise) </param>
    /// <param name="normalizeMode">The enum that indicates which way you want the map to be normalized.</param>
    /// <returns>2d float array that is the noise map. </returns>
    public static float[,] GenerateNoiseMap(int mapWidth, int mapHeight,
        int seed, float scale, int octaves, float persistance,
        float lacunarity, Vector2 offSet, NormalizeMode normalizeMode)
    {
        float[,] noiseMap = new float[mapWidth, mapHeight];                                 // Creates a 2d array for the noise map.
        float maxPossibleHeight = 0;

        System.Random prng = new System.Random(seed);                                       // random object using a seed. 
        Vector2[] octaveOffsets = new Vector2[octaves];                                     // list of offsets for each octave. 
        float amplitude = 1, frequency = 1;

        /*
         *  The random x and y offsets for each octave is so that the perlin noise map
         *  at each octave that is generated by Mathf is different. Mathf takes in 2 coordinate
         *  values to generate a noise value. For each octave to be a diffent map
         *  with a different layer it needs a different. Generating a random x and y offset will
         *  help make sure that each octave is different. The y offset is inverted so that when 
         *  you scroll positively in the inspector the noise will shfit down. (This works with x
         *  in the horizontal axises.)
         *  
         *  This loop also gets the maximum possible noise height. This is done by assuming that
         *  the perlin value is always one, so the maxHeight will always be the amplitude. The
         *  max amplitude however will increase exponentially by the persistance every single
         *  octave. So this octave loop will determine the max. 
         */
        for (int i = 0; i < octaves; i++)
        {
            float offSetX = prng.Next(-100000, 100000) + offSet.x;                          // bounded random numbers to get nicer results. 
            float offSetY = prng.Next(-100000, 100000) - offSet.y;
            octaveOffsets[i] = new Vector2(offSetX, offSetY);

            maxPossibleHeight += amplitude;
            amplitude *= persistance;
        }

        scale = scale <= 0 ? 0.0001f : scale;

        float maxLocalNoiseHeight = float.MinValue, minLocalNoiseHeight = float.MaxValue;             // keeping track of the minimum and maximum noise heigts so the map can be normalized
        float halfWidth = mapWidth / 2f, halfHeight = mapWidth / 2f;                        // keeping track of the halfwidths and height so that scalling happens from the center.

        amplitude = 1;
        frequency = 1;

        for (int y = 0; y < mapHeight; y++)
        {
            for (int x = 0; x < mapWidth; x++)
            {
                float noiseHeight = 0;
                amplitude = 1;
                frequency = 1;

                /*
                 * For every single index in the 2d array it will loop through the number of 
                 * octaves. The perlin value generated by the coordinates, offsets and frequency
                 * will then be added to the overall noise height at that position. 
                 * 
                 * Each successive octave
                 * will have a decreased amplitude (because persistance is a value between 0 and 1) and each
                 * octave will have a increased detail (because frequency is increasing and lacunarity is greater than 1). 
                 * The increased frequency means that the successive sample points will be farther apart so the 
                 * Mathf.PerlinNoise() value will be more different and thus more detailed. 
                 * 
                 * In each iteration of the loop the perlin noise (which is between -1 and 1) 
                 * that is generated will be added to the current noise height. The final noise height outside of the loop
                 * is the value that will be added to the map. It will also update the maxNoiseHeight and minNoiseHeight
                 * as necessary. 
                 * 
                 * During the iterations the offsets are added before the multiplaction of scale and frequnce
                 * so that scrolling through the offsets in the inspector (and for generating multiple chunks) 
                 * doesn't change the actual shape of the noise but ONLY scrolls it. (This is to make
                 * side-by-side chunks seemless). 
                 */
                for (int i = 0; i < octaves; i++)
                {
                    float sampleX, sampleY, perlinValue;
                    sampleX = (x - halfWidth + octaveOffsets[i].x) / scale * frequency;
                    sampleY = (y - halfHeight + octaveOffsets[i].y) / scale * frequency;

                    perlinValue = Mathf.PerlinNoise(sampleX, sampleY) * 2 - 1;
                    noiseHeight += perlinValue * amplitude;

                    amplitude *= persistance;
                    frequency *= lacunarity;
                }
                maxLocalNoiseHeight = maxLocalNoiseHeight > noiseHeight ? maxLocalNoiseHeight : noiseHeight;
                minLocalNoiseHeight = minLocalNoiseHeight < noiseHeight ? minLocalNoiseHeight : noiseHeight;

                noiseMap[x, y] = noiseHeight;


            }
        }

        /*
         * Looping through the array again and normalizing the values so they all lie between 0 and 1. 
         * The Mathf.InverseLerp(min, max, current) will provide a value between 0 and 1 that corresponds
         * to the disstance current is from min to max. 
         * 
         * If you are rendering mutiple chunks. The values for minNoiseHeight and maxNoiseHeight will
         * most likely be different. So this means that the normalization between two different chuncks
         * will become ever so slightly different. 
         * 
         * If we are not doing endless terain and instead creating the entire map at once the perfered
         * method of normalization is 
         * 
         *      noiseMap[x, y] = Mathf.InverseLerp(minNoiseHeight, maxNoiseHeight, noiseMap[x,y]);
         * 
         * But we are generating the map by chunks so we have to esitmate the minimum and Maximum values
         * that are going to be used. This requires a different approach and will be done through an enum.
         * that is chosen in the inspector. 
         * 
         * The second value involves getting the maximum possible value that the noise can be. This however
         * smooths everything a bit too much so some experimentation is needed to determine the optimal
         * factor to devide everything by. 
         */
        for (int y = 0; y < mapHeight; y++)
        {
            for (int x = 0; x < mapWidth; x++)
            {
                if (normalizeMode == NormalizeMode.Local)
                {
                    noiseMap[x, y] = Mathf.InverseLerp(minLocalNoiseHeight, maxLocalNoiseHeight, noiseMap[x, y]);
                }
                else
                {
                    float normalizedHeight = (noiseMap[x, y] + 1) / (2f * maxPossibleHeight / 1.75f);
                    normalizedHeight = normalizedHeight > 0 ? normalizedHeight : normalizedHeight * -1;
                    normalizedHeight = normalizedHeight > 1 ? 1 : normalizedHeight;
                    noiseMap[x, y] = normalizedHeight;
                }
            }
        }

        return noiseMap;
    }
}
